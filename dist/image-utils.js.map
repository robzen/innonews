{"version":3,"sources":["../image-utils.js"],"names":[],"mappings":"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","file":"image-utils.js","sourcesContent":["require(\"babel-polyfill\");\r\nconst Jimp = require('jimp');\r\nconst request = require('request');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst mkdirp = require('mkdirp');\r\n\r\nfunction ImageUtils() {}\r\n\r\nImageUtils.prototype.download = (imageUrl, fileName) => {\r\n    return new Promise((resolve, reject) => {\r\n        request.get({url: imageUrl, encoding: 'binary'}, (err, response, body) => {\r\n            if(err) {\r\n                reject(err);\r\n            } else {\r\n                //extract extension from header and use it for the filename\r\n                let extension = response.headers['content-type'].split('/')[1];\r\n                let fileNameWithExtension = fileName + '.' + extension;\r\n\r\n                createNeededFolders(fileName)\r\n                    .then(() => {\r\n                        //save as image\r\n                        fs.writeFile(fileNameWithExtension, body, 'binary', err => {\r\n                            if(err) {\r\n                                reject('error while writing file: '+err);\r\n                            } else {\r\n                                resolve(fileNameWithExtension);\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        reject('error while creating necessary folders: '+err);\r\n                    });\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\nImageUtils.prototype.edit = (imgFile, width, height, paddingBottom, text) => {\r\n    const txtPadding = 6, fontSize = 16;\r\n    const textHeight = ((text.length * fontSize) / width) * fontSize + txtPadding;\r\n    const backgroundImgFileName = 'txtBg.png';\r\n\r\n    return new Promise((resolve, reject) => {\r\n        Jimp.read(imgFile)\r\n            .then(img => {\r\n                //resize the image\r\n                img.cover(width, height, Jimp.VERTICAL_ALIGN_TOP).quality(100);\r\n                return img;\r\n            })\r\n            .then(img => {\r\n                //add background image at the bottom\r\n                return Jimp.read(backgroundImgFileName)\r\n                    .then((txtBgImg) => {\r\n                        return img.composite(txtBgImg, 0, height - textHeight - paddingBottom);\r\n                    });\r\n            })\r\n            .then(img => {\r\n                //write text into the image\r\n                //if the font gets changed don't forget to change the fontSize const too\r\n                return Jimp.loadFont(Jimp.FONT_SANS_16_WHITE)\r\n                    .then(font => {\r\n                        img.print(font, txtPadding, height - textHeight - paddingBottom + txtPadding, text, width - txtPadding);\r\n                        return img;\r\n                    });\r\n            })\r\n            .then(img => {\r\n                //save edited image\r\n                img.write(imgFile);\r\n                resolve(imgFile);\r\n            })\r\n            .catch(err => {\r\n                reject(err);\r\n            })\r\n    });\r\n};\r\n\r\nImageUtils.prototype.deleteImages = async imageFolder => {\r\n    return new Promise((resolve, reject) => {\r\n        fs.readdir(imageFolder, (err, files) => {\r\n            if(err) {\r\n                reject('error while deleting images: '+err);\r\n            } else {\r\n                if(files.length <= 0) {\r\n                    resolve(0);\r\n                } else {\r\n                    files.forEach((fileName, i) => {\r\n                        fs.unlink(imageFolder+'/'+fileName, err => {\r\n                            if(err) { console.log('could not delete file '+fileName); }\r\n                        });\r\n\r\n                        if(i+1 >= files.length) {\r\n                            resolve(files.length);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\nfunction createNeededFolders(filePath) {\r\n    return new Promise((resolve, reject) => {\r\n        //cuts the filename so you only have the folder path\r\n        let parsedPath = path.parse(filePath);\r\n\r\n        //creates necessary folders\r\n        mkdirp(parsedPath.dir, err => {\r\n            if(err) {\r\n                reject(err);\r\n            } else {\r\n                resolve(path);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nmodule.exports = ImageUtils;"]}